version: 3.9

networks:
  sagnet:

services:

  codebuild:
    image: ${REG}${REPO_MSR}:${TAG_MSR}
    entrypoint: /opt/softwareag/IntegrationServer/bin/jcode.sh
    command: make BookstoreAPI
    volumes:
      - ./assets/IS/Packages/BookstoreAPI:/opt/softwareag/IntegrationServer/packages/BookstoreAPI:rw
    networks:
      - sagnet

  localdev:
    image: ${REG}${REPO_MSR}:${TAG_MSR}
    ports:
      - 5555:5555
    environment: 
      JAVA_MIN_MEM: 1g
      JAVA_MAX_MEM: 1g
      JDBC_HOST: postgres
      JDBC_PORT: "5432"
      JDBC_USERNAME: postgres
      JDBC_USERPASSWORD: postgres
    volumes:
      - ./licensing/msr-licenseKey.xml:/opt/softwareag/IntegrationServer/config/licenseKey.xml:rw
      - ./application-localdev.properties:/opt/softwareag/IntegrationServer/application.properties:rw
      - ./workspace/replicate:/opt/softwareag/IntegrationServer/replicate:rw
      - ./libs/postgresql.jar:/opt/softwareag/IntegrationServer/packages/WmJDBCAdapter/code/jars/postgresql.jar:ro
      - ./assets/IS/Packages/BookstoreAPI:/opt/softwareag/IntegrationServer/packages/BookstoreAPI:rw
    networks:
      - sagnet

  # postgress db + load the sql scripts to create tables and fill with some sample records
  postgres:
    image: postgres:13.4-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5432:5432
    volumes: 
      - ./workspace/postgres-data:/var/lib/postgresql/data
      - ./assets/sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
      - ./assets/sql/fill_tables.sql:/docker-entrypoint-initdb.d/fill_tables.sql
    networks:
      - sagnet